/** * Created by mityabeldii on 10.06.2017. */import { Animated, Dimensions } from 'react-native'import * as dictionary from './dictionary'const window = Dimensions.get('window');// Valuesexport const littleRadius = window.height *  0.01056;export const bigRadius = window.height * 0.0176;export const animationOpcityScDuration = 300;export const passwordLenght = 1;// Font Sizesexport const fontSizeMiddle = window.height * 0.03;// Fontexport const fontFamilySemiBold = 'seguisb';export const fontFamilyRegular  = 'segoeui';// Colors// #256EAF// Cardsexport const appBackgroundColor     = '#E2E2E2';export const signinBackgroundColor  = '#487367';export const tabBackColor           = '#FFFFFF';export const selectedTabBackColor   = '#CBCBCB';// Fontsexport const fontColorMain      = '#000000';export const fontColorSecondary = '#a5a8aa';// Buttonsexport const buttonFontColor    = '#FFFFFF';export const buttonBackColor    = '#AFB1B3';export const buttonAcceptColor  = '#23B400';export const buttonRejectColor  = '#df3e3f';// Shadow Props// shadowColor: mvConsts.shadowColor, shadowRadius: mvConsts.shadowRadius, shadowOpacity: mvConsts.shadowOpacity, shadowOffset: mvConsts.shadowOffset,export const shadowColor = '#000000';export const shadowRadius = 3.5;export const shadowOpacity = 0.2;export const shadowOffset = {width: 0, height: 0};// Screensexport const screens = [    'AuthorizationSc',    // Menu Screens    'ProfileSc',    'SessionSc',    'CommunitySc',    'SettingsSc',    'OpacitySc',];// Profile Tabsexport const profileTabs = [    'Following',    'Followers',    'Flights',];export const buttonStyles = {    pushed: 'pushed',    unpushed: 'unpushed',    accept: 'accept',    reject: 'reject',}export const opacityLayers = {    unfollow: "unfollow",    flightSc: "flightSc",    picker: "picker",    mapViewer: "mapViewer",    photoViewer: "photoViewer",    heightRuler: "heightRuler",    sessionedit: "sessionedit",}export const aircraftTypes = {    plane: "Plane",    glider: "Glider",    helicopter: "Helicopter",    gyroplane: "Gyroplane",}export const buttonPanel = {    like: 'like',    comments: 'comments',    edit: 'edit',    share: 'share',}export const panelType = {    author: "author",    visitor: "visitor",}export const animation = {    hidden: 'hidden',    shown: 'shown',    input: 'input',}export const authscreens = {    signin: "signin",    signup: "signup",}export const errors = {    outOfErrors: "outOfError",    outOfEmail: "Empty e-mail",    outOfPassword: "Empty password",    outOfCinfirm: "Please, confirm password",    outOfName: "Enter your first name, please",    outOfSurname: "Enter your second name, please",    outOfAirport: "Choose your airport, or enter new airport",    wrongEmail: "Wrong e-mail",    wrongPassword: "Wrong password",    existingEmail: "Acount with this e-mail is already exists",    shortPassword: "Password should be at least 8 symbols long",    wrongConfirm: "Passwords are not the same",}export const mapTypes = {    standard: "standard",    satellite: "satellite",    hybrid: "hybrid",    terrain: "terrain",}export const languages = {    english: "English",    russian: "Русский",}export const distance = (lat1, long1, lat2, long2) => {    let distance = 111.2 * (Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(long2-long1)))    return(distance)}export const animationaction = (variable, value, duration) => {    if (duration === undefined) {        duration = 1    }    if (variable === value) {        value = variable    }    if (variable === undefined) {        console.log('ERROR: mvConsts.animation prop is undefined (variable)')        return    }    Animated.timing(        variable,        {            toValue: value,            duration: animationOpcityScDuration * duration,        }    ).start()}export const aircraftsInRadius = (aircrafts, myAircraftNumber, radius) => {    // Radius in km    let aircraftsInRadius = []    for (let i in aircrafts) {        if (distance(aircrafts[myAircraftNumber].latitude, aircrafts[myAircraftNumber].longitude, aircrafts[i].latitude, aircrafts[i].longitude, ) < radius) {            aircraftsInRadius.push(aircrafts[i])        }    }    return(aircraftsInRadius)}export const trackDistane = (track) => {    let trackDistane = 0    for (let i = 0; i < track.length - 1; i++) {        trackDistane = trackDistane + distance(track[i].latitude, track[i].longitude, track[i + 1].latitude, track[i + 1].longitude)    }    return trackDistane}